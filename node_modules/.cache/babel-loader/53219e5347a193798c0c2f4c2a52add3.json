{"ast":null,"code":"// import config from 'config';\nimport { authHeader } from './auth-header';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\nconst backendurl = \"http://localhost:7000/\";\n\nfunction login(staffId, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      staffId,\n      password\n    })\n  }; // return fetch(`/users/authenticate`, requestOptions)\n\n  return fetch(backendurl + `employee/verify`, requestOptions).then(handleResponse).then(user => {\n    // console.log(\"User Services\");\n    // console.log(user)\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    if (!user.status) {\n      localStorage.setItem('user', JSON.stringify(user));\n      return user;\n    }\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(backendurl + `signup`, requestOptions).then(handleResponse); // return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["C:/Users/Aditya/Desktop/Krupa/VodafonePhotoGallery/src/Components/Services/user.service.js"],"names":["authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","backendurl","staffId","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","status","localStorage","setItem","removeItem","id","response","text","data","parse","ok","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["// import config from 'config';\r\nimport { authHeader } from './auth-header';\r\n\r\nexport const userService = {\r\n    login,\r\n    logout,\r\n    register,\r\n    getAll,\r\n    getById,\r\n    update,\r\n    delete: _delete\r\n};\r\n\r\nconst backendurl=\"http://localhost:7000/\";\r\n\r\nfunction login(staffId, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ staffId, password })\r\n    };\r\n\r\n    // return fetch(`/users/authenticate`, requestOptions)\r\n    return fetch(backendurl+`employee/verify`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // console.log(\"User Services\");\r\n            // console.log(user)\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            if(!user.status){\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                return user;\r\n            }\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction getAll() {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`/users`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction getById(id) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction register(user) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(backendurl+`signup`, requestOptions).then(handleResponse);\r\n    // return fetch(`/users/register`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction update(user) {\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { ...authHeader(), 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(user)\r\n    };\r\n\r\n    return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);;\r\n}\r\n\r\n// prefixed function name with underscore because delete is a reserved word in javascript\r\nfunction _delete(id) {\r\n    const requestOptions = {\r\n        method: 'DELETE',\r\n        headers: authHeader()\r\n    };\r\n\r\n    return fetch(`/users/${id}`, requestOptions).then(handleResponse);\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                // location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya\\\\Desktop\\\\Krupa\\\\VodafonePhotoGallery\\\\src\\\\Components\\\\Photos\\\\ListPhoto.js\";\nimport React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { photosList } from '../../Redux/Actions/photosList';\nimport { albumsList } from '../../Redux/Actions/albumsList';\nimport Loader from '../Common/Loader';\nimport Pagination from '../Common//Pagination';\nimport PhotoCard from './PhotoCard';\nimport { history } from '../../Routing/history';\n\nclass ListPhoto extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onPageChanged = data => {\n      const {\n        currentPage,\n        totalPages,\n        pageLimit\n      } = data;\n      const offset = (currentPage - 1) * pageLimit;\n      const currentPhotos = this.props.photos.slice(offset, offset + pageLimit);\n      this.setState({\n        currentPage,\n        currentPhotos,\n        totalPages\n      });\n    };\n\n    this.state = {\n      loader: true,\n      currentPhotos: [],\n      currentPage: null,\n      totalPages: null\n    };\n  }\n\n  componentDidMount() {\n    let user = JSON.parse(localStorage.getItem('user')); // console.log(user);\n\n    if (!user) {\n      history.push('/Login');\n    }\n\n    this.props.photosList().then(() => {\n      this.setState({\n        loader: false\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        loader: false\n      });\n    });\n    this.props.albumsList().then(() => {\n      this.setState({\n        loader: false\n      });\n    }).catch(err => {\n      console.log(err);\n      this.setState({\n        loader: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      currentPhotos\n    } = this.state;\n    var totalPhotos = this.props.photos;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, totalPhotos !== undefined && totalPhotos.length > 0 ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Pagination, {\n      totalRecords: totalPhotos.length,\n      pageLimit: 21,\n      pageNeighbours: 1,\n      onPageChanged: this.onPageChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), currentPhotos.map(photos => React.createElement(PhotoCard, {\n      key: photos.id,\n      photos: photos,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }))) : React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    photos: state.photos,\n    albums: state.albums\n  };\n};\n\nexport default connect(mapStateToProps, {\n  photosList,\n  albumsList\n})(ListPhoto);","map":{"version":3,"sources":["C:/Users/Aditya/Desktop/Krupa/VodafonePhotoGallery/src/Components/Photos/ListPhoto.js"],"names":["React","Fragment","connect","photosList","albumsList","Loader","Pagination","PhotoCard","history","ListPhoto","Component","constructor","props","onPageChanged","data","currentPage","totalPages","pageLimit","offset","currentPhotos","photos","slice","setState","state","loader","componentDidMount","user","JSON","parse","localStorage","getItem","push","then","catch","err","console","log","render","totalPhotos","undefined","length","map","id","mapStateToProps","albums"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { photosList } from '../../Redux/Actions/photosList'\r\nimport { albumsList } from '../../Redux/Actions/albumsList'\r\nimport Loader from '../Common/Loader'\r\nimport Pagination from '../Common//Pagination'\r\nimport PhotoCard from './PhotoCard'\r\nimport { history } from '../../Routing/history';\r\n\r\nclass ListPhoto extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            loader: true,\r\n            currentPhotos: [],\r\n            currentPage: null,\r\n            totalPages: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = JSON.parse(localStorage.getItem('user'));\r\n        // console.log(user);\r\n        if(!user){\r\n            history.push('/Login')\r\n        } \r\n        this.props.photosList().then(() => {\r\n            this.setState({loader: false})\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            this.setState({loader: false})\r\n        });\r\n        \r\n        this.props.albumsList().then(() => {\r\n            this.setState({loader: false})\r\n        }).catch((err) => {\r\n            console.log(err)\r\n            this.setState({loader: false})\r\n        });\r\n    }\r\n\r\n    onPageChanged = data => {\r\n        const { currentPage, totalPages, pageLimit } = data;\r\n    \r\n        const offset = (currentPage - 1) * pageLimit;\r\n        const currentPhotos = this.props.photos.slice(offset, offset + pageLimit);\r\n    \r\n        this.setState({ currentPage, currentPhotos, totalPages });\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            currentPhotos\r\n          } = this.state;\r\n        var totalPhotos = this.props.photos;\r\n\r\n        return (\r\n            <Fragment>\r\n                {totalPhotos !== undefined && totalPhotos.length > 0 ?\r\n                    <Fragment>\r\n                        <Pagination\r\n                            totalRecords={totalPhotos.length}\r\n                            pageLimit={21}\r\n                            pageNeighbours={1}\r\n                            onPageChanged={this.onPageChanged}\r\n                        />\r\n                        {currentPhotos.map(photos => (\r\n                            <PhotoCard key={photos.id} photos={photos} />\r\n                        ))}\r\n                    </Fragment>\r\n                       :\r\n                    <Loader /> \r\n                }\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        photos: state.photos,\r\n        albums: state.albums\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {photosList,albumsList})(ListPhoto)"]},"metadata":{},"sourceType":"module"}